input CreateMessageInput {
  text: String!
  clientMutationId: String
}

type CreateMessagePayload {
  messageEdge: MessageEdge
  user: User
  clientMutationId: String
}

input DeleteMessageInput {
  id: ID!
  clientMutationId: String
}

type DeleteMessagePayload {
  deletedMessageId: ID
  user: User
  clientMutationId: String
}

type Message implements Node {
  # The ID of an object
  id: ID!
  text: String
  ts: Int
}

# A connection to a list of items.
type MessageConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MessageEdge]
}

# An edge in a connection.
type MessageEdge {
  # The item at the end of the edge
  node: Message

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  createMessage(input: CreateMessageInput!): CreateMessagePayload
  deleteMessage(input: DeleteMessageInput!): DeleteMessagePayload
  updateMessage(input: UpdateMessageInput!): UpdateMessagePayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  user: User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input UpdateMessageInput {
  id: ID!
  text: String!
  clientMutationId: String
}

type UpdateMessagePayload {
  message: Message
  clientMutationId: String
}

type User implements Node {
  # The ID of an object
  id: ID!
  messages(status: String = "any", after: String, first: Int, before: String, last: Int): MessageConnection
  totalCount: Int
  avatar: String
  name: String
}